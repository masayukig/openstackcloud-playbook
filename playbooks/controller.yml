---
- hosts: controller
  tasks:
    - name: Add authorized_key
      vars:
        user: "masayuki"
        keys:
          - ed25519
          - rsa
      authorized_key:
        user: "{{ user }}"
        key: "{{ lookup('file', '/home/{{user}}/.ssh/id_{{item}}.pub')}}"
      with_items:
        - "{{ keys }}"
    - name: Set hostname
      command: hostname controller
      become: yes
    - name: Set hostname file
      vars:
        host: "controller"
      template:
        src: templates/hostname.j2
        dest: /etc/hostname
        owner: root
        group: root
        mode: "0644"
      become: yes
    - name: Unset IP address for provider interface
      template:
        src: templates/ifcfg.j2
        dest: /etc/sysconfig/network/ifcfg-eth0
        owner: root
        group: root
        mode: "0600"
      become: yes
      # notify: reboot
    - name: Update hosts
      template:
        src: templates/hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: "0644"
      become: yes
    - name: Update all package
      zypper:
        name: '*'
        state: latest
      become: yes
    - name: Install chrony
      zypper:
        name: chrony
        state: present
      become: yes

    - name: Update chrony setting
      template:
        src: templates/chrony.conf.j2
        dest: /etc/chrony.conf
        owner: root
        group: chrony
        mode: "0640"
      become: yes
    - name: restart chronyd service
      systemd:
        name: chronyd.service
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes
    - name: Add openstack repo
      zypper_repository:
        name: Rocky
        repo: 'obs://Cloud:OpenStack:Rocky/openSUSE_Leap_15.0'
        state: present
      become: yes
    - name: Refresh all repos
      zypper_repository:
        repo: '*'
        runrefresh: yes
        auto_import_keys: true
      become: yes
    - name: Remove conflict packages
      zypper:
        name: patterns-openSUSE-minimal_base-conflicts
        state: absent
      become: yes
    - name: dist-upgrade
      zypper:
        name: '*'
        state: dist-upgrade
        extra_args: '--no-allow-vendor-change --allow-arch-change'
      become: yes
    - name: Install opnestack packages
      zypper:
        name: ['python-openstackclient','mariadb','mariadb-client','python-PyMySQL']
        state: present
      become: yes
    - name: Configure mysql
      template:
        src: templates/openstack.cnf.j2
        dest: /etc/my.cnf.d/openstack.cnf
        owner: root
        group: root
        mode: "0644"
      become: yes
      #    - name: stop mysql service
      #      systemd:
      #        name: mysql.service
      #        state: stopped
      #        enabled: yes
      #      become: yes
      #
      #    - name: check if mysql log file size is 0 or not
      #      stat: path=/var/log/mysql/mysqld.log
      #      register: log_file
      #      changed_when: false
      #      become: yes
      #
      #    - name: initialize insecure mysql
      #      command: mysqld --initialize-insecure --user=mysql
      #      changed_when: false
      #      when: log_file.stat.exists == False or log_file.stat.size == 0
      #      become: yes

    - name: restart mysql service
      systemd:
        name: mysql.service
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes

    # [FIXME] These are trying to pretend mysql_secure_installation,
    # however, this doesn't work well for now, so,
    # do `mysql_secure_installation` on the controller node as a workaround.
    # And then, run the following playbook again.
    #    - name: Set the root password
    #      mysql_user: login_user=root login_password="{{ mysql_pass }}" user=root password="{{ mysql_pass }}" check_implicit_admin=yes login_unix_socket=/run/mysql/mysql.sock
    #
    #    - name: Secure the root user for IPV6 localhost (::1)
    #      mysql_user: login_user=root login_password="{{ mysql_pass }}" user=root password="{{ mysql_pass }}" host="::1"
    #
    #    - name: Secure the root user for IPV4 localhost (127.0.0.1)
    #      mysql_user: login_user=root login_password="{{ mysql_pass }}" user=root password="{{ mysql_pass }}" host="127.0.0.1"
    #
    #    - name: Secure the root user for localhost domain
    #      mysql_user: login_user=root login_password="{{ mysql_pass }}" user=root password="{{ mysql_pass }}" host="localhost"
    #
    #    - name: Secure the root user for server_hostname domain
    #      mysql_user: login_user=root login_password="{{ mysql_pass }}" user=root password="{{ mysql_pass }}" host="{{ ansible_fqdn }}"
    #
    #    - name: Deletes anonymous server user
    #      mysql_user: login_user=root login_password="{{ mysql_pass }}" user="" host_all=yes state=absent
    #
    #    - name: Removes the test database
    #      mysql_db: login_user=root login_password="{{ mysql_pass }}" db=test state=absent
    #
    - name: Install rabbitmq
      zypper:
        name: rabbitmq-server
        state: present
      become: yes
    - name: Configure rabbitmq
      template:
        src: templates/rabbitmq-env.conf.j2
        dest: /etc/rabbitmq/rabbitmq-env.conf
        owner: root
        group: root
        mode: "0644"
      become: yes
    - name: restart rabbitmq service
      systemd:
        name: rabbitmq-server.service
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes
    - name: add openstack user for rabbitmq
      rabbitmq_user:
        user: openstack
        password: "{{ rabbit_pass }}"
        configure_priv: .*
        read_priv: .*
        write_priv: .*
        state: present
      become: yes

    #########################
    # Memcached
    #########################
    - name: Install memcached
      zypper:
        name: ['memcached','python-python-memcached']
        state: present
      become: yes
    - name: Configure memcached
      template:
        src: templates/memcached.j2
        dest: /etc/sysconfig/memcached
        owner: root
        group: root
        mode: "0644"
        backup: yes
      become: yes
    - name: restart memcached service
      systemd:
        name: memcached.service
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes

    #########################
    # etcd
    #########################
    - name: Add etcd group
      group: name=etcd system=yes
      become: yes
    - name: Add etcd user
      user:
        name: etcd
        system: yes
        home: /var/lib/etcd
        shell: /bin/false
        group: etcd
      become: yes
    - name: Make directories
      file:
        path: '{{ item }}'
        owner: etcd
        group: etcd
        state: directory
      with_items:
        - /etc/etcd
        - /var/lib/etcd
      become: yes
    - name: Check etcd binary existence
      stat:
        path: /usr/bin/etcdctl
      register: etcdctl
    - name: Install etcd
      script: files/install_etcd.sh
      when: not etcdctl.stat.exists
      become: yes
    - name: Create etcd.conf.yml and etcd.service
      template:
        src: 'templates/{{ item.src }}'
        dest: '{{ item.dest }}'
        owner: '{{ item.owner }}'
        group: '{{ item.group }}'
        mode: '0644'
      with_items:
        - {src: 'etcd.conf.yml.j2', dest: '/etc/etcd/etcd.conf.yml', owner: 'etcd', group: 'etcd'}
        - {src: 'etcd.service.j2', dest: '/usr/lib/systemd/system/etcd.service', owner: 'root', group: 'root'}
      become: yes
    - name: Reload and restart etcd
      systemd:
        name: etcd.service
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes

    #########################
    # Keystone
    #########################
    - name: Create keystone database
      mysql_db:
        name: keystone
        state: present
        login_user: root
        login_password: '{{ mysql_pass }}'
        login_unix_socket: /var/run/mysql/mysql.sock
    - name: Grant proper access to the keystone database
      mysql_user:
        name: keystone
        host: '{{ item }}'
        priv: 'keystone.*:ALL,GRANT'
        password: '{{ keystone_dbpass }}'
        state: present
        login_user: root
        login_password: '{{ mysql_pass }}'
        login_unix_socket: /var/run/mysql/mysql.sock
      with_items:
        - localhost
        - '%'
    - name: Install keystone
      zypper:
        name: ['openstack-keystone']
        state: present
      become: yes
    - name: Modify keystone.conf
      template:
        src: templates/010-keystone-custom.conf.j2
        dest: /etc/keystone/keystone.conf.d/010-keystone-custom.conf
        owner: root
        group: keystone
        mode: '0640'
      become: yes
    - name: Populate the Identity service database
      command: keystone-manage db_sync
    - name: Chown /etc/keystone/credential-keys to keystone for a workaround
      become: yes
      file:
        path: /etc/keystone/credential-keys
        owner: keystone
        group: keystone
        state: directory
    - name: Initialize Fernet key repositories
      command: '{{ item }}'
      become: yes
      with_items:
        - keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
        - keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
    - name: Bootstrap the Identity service
      become: yes
      command: keystone-manage bootstrap --bootstrap-password '{{ admin_pass }}' --bootstrap-admin-url http://controller:5000/v3/ --bootstrap-internal-url http://controller:5000/v3/ --bootstrap-public-url http://controller:5000/v3/ --bootstrap-region-id RegionOne
    - name: Install apache2
      zypper:
        name: ['apache2','apache2-mod_wsgi']
        state: present
      become: yes
    - name: Configure the Apache HTTP server
      template:
        src: 'templates/{{ item.src }}'
        dest: '{{ item.dest }}'
        owner: root
        group: root
        mode: '0644'
      with_items:
        - { src: 'apache2.j2', dest: '/etc/sysconfig/apache2' }
        - { src: 'wsgi-keystone.conf.j2', dest: '/etc/apache2/conf.d/wsgi-keystone.conf' }
      become: yes
    - name: Recursively change the ownership of the /etc/keystone directory
      file:
        path: /etc/keystone
        owner: keystone
        group: keystone
        recurse: yes
      become: yes
    - name: Start the Apache HTTP service and configure it to start when the system boots
      systemd:
        name: apache2.service
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes
    - name: put admin-openrc
      template:
        src: templates/admin-openrc.j2
        dest: '{{ ansible_env.HOME }}/admin-openrc'
    - name: Create a domain, projects, users, and roles
      script: files/create_keystone_resources.sh

    #########################
    # Glance
    #########################
    - name: Create glance database
      mysql_db:
        name: glance
        state: present
        login_user: root
        login_password: '{{ mysql_pass }}'
        login_unix_socket: /var/run/mysql/mysql.sock
    - name: Grant proper access to the glance database
      mysql_user:
        name: glance
        host: '{{ item }}'
        priv: 'glance.*:ALL,GRANT'
        password: '{{ glance_dbpass }}'
        state: present
        login_user: root
        login_password: '{{ mysql_pass }}'
        login_unix_socket: /var/run/mysql/mysql.sock
      with_items:
        - localhost
        - '%'
    - name: create the service credentials, endpoints
      script: files/create_glance_resources.sh
    - name: Install glance packages
      zypper:
        name: ['openstack-glance','openstack-glance-api','openstack-glance-registry']
        state: present
      become: yes
    - name: put glance conf files
      become: yes
      template:
        src: 'templates/{{ item.src }}'
        dest: '/etc/glance/{{ item.dest }}'
        owner: root
        group: glance
        mode: "0644"
      with_items:
        - {src: '010-glance-api-custom.conf.j2', dest: 'glance-api.conf.d/010-glance-api-custom.conf'}
        - {src: '010-glance-registry-custom.conf.j2', dest: 'glance-registry.conf.d/010-glance-registry-custom.conf'}
    - name: Start the Image services and configure them to start when the system boots
      systemd:
        name: '{{ item }}'
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes
      with_items:
        - openstack-glance-api.service
        - openstack-glance-registry.service
    - name: Verify Glance operation
      script: files/verify-glance.sh

    #########################
    # Nova
    #########################
    - name: Create nova database
      mysql_db:
        name: '{{ item }}'
        state: present
        login_user: root
        login_password: '{{ mysql_pass }}'
        login_unix_socket: /var/run/mysql/mysql.sock
      with_items:
        - nova_api
        - nova
        - nova_cell0
        - placement
    - name: Grant proper access to the nova database
      mysql_user:
        name: '{{ item.user }}'
        host: '{{ item.host }}'
        priv: '{{ item.db }}.*:ALL,GRANT'
        append_privs: yes
        password: '{{ item.dbpass }}'
        state: present
        login_user: root
        login_password: '{{ mysql_pass }}'
        login_unix_socket: /var/run/mysql/mysql.sock
      loop:
        - {host: 'localhost', db: 'nova_api', user: 'nova', dbpass: '{{ nova_dbpass }}'}
        - {host: '%', db: 'nova_api', user: 'nova', dbpass: '{{ nova_dbpass }}'}
        - {host: 'localhost', db: 'nova', user: 'nova', dbpass:  '{{ nova_dbpass }}'}
        - {host: '%', db: 'nova', user: 'nova', dbpass: '{{ nova_dbpass }}'}
        - {host: 'localhost', db: 'nova_cell0', user: 'nova', dbpass: '{{ nova_dbpass }}'}
        - {host: '%', db: 'nova_cell0', user: 'nova', dbpass: '{{ nova_dbpass }}'}
        - {host: 'localhost', db: 'placement', user: 'placement', dbpass: '{{ placement_dbpass }}'}
        - {host: '%', db: 'placement', user: 'placement', dbpass: '{{ placement_dbpass }}'}
    - name: Create nova/placement resources
      script: files/create_nova_resources.sh
    - name: Install nova packages
      zypper:
        name: ['openstack-nova-api',
               'openstack-nova-scheduler',
               'openstack-nova-conductor',
               'openstack-nova-novncproxy',
               'openstack-nova-placement-api',
               'iptables']
        state: present
      become: yes
    - name: put nova conf files
      become: yes
      template:
        src: templates/010-nova-custom.conf.j2
        dest: /etc/nova/nova.conf.d/010-nova-custom.conf
        owner: root
        group: nova
        mode: "0644"
    - name: Populate the nova-api and placement databases
      become: yes
      script: files/su_shell_command.sh "nova-manage api_db sync" nova
    - name: Register the cell0 database
      become: yes
      script: files/su_shell_command.sh "nova-manage cell_v2 map_cell0" nova
    - name: Create the cell1 cell
      become: yes
      script: files/su_shell_command.sh "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova
    - name: Populate the nova database
      become: yes
      script: files/su_shell_command.sh "nova-manage db sync" nova
    - name: Verify nova cell0 and cell1 are registered correctly
      become: yes
      script: files/su_shell_command.sh "nova-manage cell_v2 list_cells" nova
    - name: Enable the placement API Apache vhost (copy the config)
      become: yes
      command: cp -f /etc/apache2/vhosts.d/nova-placement-api.conf.sample /etc/apache2/vhosts.d/nova-placement-api.conf
    - name: Start the compute services and configure them to start when the system boots
      systemd:
        name: '{{ item }}'
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: yes
      loop:
        - apache2.service
        - openstack-nova-api.service
        - openstack-nova-scheduler.service
        - openstack-nova-conductor.service
        - openstack-nova-novncproxy.service

      #    - name: Chown nova directories to nova as a workaround
      #      become: yes
      #      file:
      #        path: {{ item }}
      #        owner: nova
      #        group: nova
      #        state: directory
      #        recurse: yes
      #      loop:
      #        - /var/lib/nova
      #        - /var/log/nova
      #        - /var/cache/nova
      #        #- /etc/nova

#  handlers:
#    - name: reboot
#      reboot:

