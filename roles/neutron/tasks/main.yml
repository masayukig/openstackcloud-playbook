#########################
# Neutron
#########################
- name: Create neutron database
  mysql_db:
    name: '{{ item }}'
    state: present
    login_user: root
    login_password: '{{ mysql_pass }}'
    login_unix_socket: /var/run/mysql/mysql.sock
  with_items:
    - neutron
- name: Grant proper access to the nova database
  mysql_user:
    name: '{{ item.user }}'
    host: '{{ item.host }}'
    priv: '{{ item.db }}.*:ALL,GRANT'
    append_privs: yes
    password: '{{ item.dbpass }}'
    state: present
    login_user: root
    login_password: '{{ mysql_pass }}'
    login_unix_socket: /var/run/mysql/mysql.sock
  loop:
    - {host: 'localhost', db: 'neutron', user: 'neutron', dbpass: '{{ neutron_dbpass }}'}
    - {host: '%', db: 'neutron', user: 'neutron', dbpass: '{{ neutron_dbpass }}'}
- name: Prepare .config/openstack direcotry
  file:
    path: '{{ ansible_env.HOME }}/.config/openstack'
    state: directory
- name: Put cloud.yaml
  template:
    src: '{{ item }}.j2'
    dest: '{{ ansible_env.HOME }}/.config/openstack/{{ item }}'
  loop:
    - clouds.yaml
- name: Create the neutron user
  os_user:
    cloud: admin
    state: present
    name: neutron
    password: '{{ neutron_pass }}'
    domain: default
- name: Add the admin role to the neutron user
  os_user_role:
    cloud: admin
    user: neutron
    role: admin
    project: service
- name: Create the neutron service entity
  os_keystone_service:
    cloud: admin
    state: present
    name: neutron
    service_type: network
    description: OpenStack Networking
- name: Create the Networking service API endpoints
  os_keystone_endpoint:
    cloud: admin
    service: neutron
    region: RegionOne
    endpoint_interface: '{{ item }}'
    url: http://controller:9696
  loop:
    - public
    - internal
    - admin

- name: Install the neutron components
  zypper:
    name: ['openstack-neutron',
           'openstack-neutron-server',
           'openstack-neutron-linuxbridge-agent',
           'openstack-neutron-l3-agent',
           'openstack-neutron-dhcp-agent',
           'openstack-neutron-metadata-agent',
           'bridge-utils']
    state: present
  become: yes
- name: Put neutron configs
  become: yes
  template:
    src: '{{ item.src }}'
    dest: '/etc/neutron/{{ item.dest }}'
  loop:
    - {src: '010-neutron-custom.conf.j2', dest: 'neutron.conf.d/010-neutron-custom.conf'}
    - {src: 'ml2_conf.ini.j2', dest: 'plugins/ml2/ml2_conf.ini'}
    - {src: 'linuxbridge_agent.ini.j2', dest: 'plugins/ml2/linuxbridge_agent.ini'}
    - {src: 'l3_agent.ini.j2', dest: 'l3_agent.ini'}
    - {src: 'metadata_agent.ini.j2', dest: 'metadata_agent.ini'}

- name: Enable networking bridge support
  modprobe:
    name: br_netfilter
    state: present
  become: yes
- name: Put neutron configs
  become: yes
  template:
    src: br_netfilter.conf.j2
    dest: /etc/modules-load.d/br_netfilter.conf

- name: Disable apparmor dnsmasq and haproxy
  become: yes
  file:
    src: '/etc/apparmor.d/usr.sbin.{{ item }}'
    dest: '/etc/apparmor.d/disable/{{ item }}'
    state: link
  loop:
    - dnsmasq
    - haproxy
- name: Restart apparmor
  become: yes
  systemd:
    name: apparmor
    state: restarted
    daemon_reload: yes
    enabled: yes
- name: Restart openstack services
  become: yes
  systemd:
    name: '{{ item }}'
    state: restarted
    daemon_reload: yes
    enabled: yes
  loop:
    - openstack-neutron.service
    - openstack-neutron-linuxbridge-agent.service
    - openstack-neutron-dhcp-agent.service
    - openstack-neutron-metadata-agent.service
    - openstack-neutron-l3-agent.service
